#version 140
layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

in vec3 in_Vertex0[];
in vec4 in_TextureAlpha0[];
in float in_Scale0[];
in float in_Alpha0[];

out vec2 out_TexCoord;
out vec4 out_TextureAlpha;
out float out_Alpha;

uniform mat4x4 projection, view;
uniform vec3 camPos;

void main()
{
	float alpha = in_Alpha0[0];
	if(alpha == 0.0f)
		return;

	float scale = in_Scale0[0];
	float hScale = scale * 0.5f;
	vec3 pos = in_Vertex0[0];
	vec4 textureAlpha = in_TextureAlpha0[0];

	vec3 lookDir = normalize(pos - camPos);
	vec3 upDir = vec3(0.0f, 1.0f, 0.0f);
	vec3 perpDir = cross(lookDir, upDir);

	mat4x4 mvp = projection * view;

	pos -= (perpDir * hScale);
	pos.y -= hScale;
	gl_Position = mvp * vec4(pos, 1.0f);
	out_TexCoord = vec2(0.0f, 0.0f);
	out_TextureAlpha = textureAlpha;
	out_Alpha = alpha;
	EmitVertex();

	pos += (perpDir * scale);
	gl_Position = mvp * vec4(pos, 1.0f);
	out_TexCoord = vec2(0.5f, 0.0f);
	out_TextureAlpha = textureAlpha;
	out_Alpha = alpha;
	EmitVertex();

	pos.y += scale;
	pos -= (perpDir * scale);
	gl_Position = mvp * vec4(pos, 1.0f);
	out_TexCoord = vec2(0.0f, 0.5f);
	out_TextureAlpha = textureAlpha;
	out_Alpha = alpha;
	EmitVertex();

	pos += (perpDir * scale);
	gl_Position = mvp * vec4(pos, 1.0f);
	out_TexCoord = vec2(0.5f, 0.5f);
	out_TextureAlpha = textureAlpha;
	out_Alpha = alpha;
	EmitVertex();

	EndPrimitive();
}