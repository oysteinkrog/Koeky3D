//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Koeky3D.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Koeky3D.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 140
        ///in vec2 out_TexCoord;
        ///
        ///uniform sampler2D texture;
        ///uniform int useTexture;
        ///uniform vec4 drawColor;
        ///
        ///void main()
        ///{
        ///	if(useTexture == 1)
        ///		gl_FragColor = texture2D(texture, out_TexCoord);
        ///	else
        ///		gl_FragColor = drawColor;
        ///}.
        /// </summary>
        internal static string DefaultFragmentShader {
            get {
                return ResourceManager.GetString("DefaultFragmentShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 140
        ///in vec3 in_Vertex;
        ///in vec2 in_TexCoord;
        ///
        ///out vec2 out_TexCoord;
        ///
        ///uniform mat4x4 projection, view, world;
        ///
        ///void main()
        ///{
        ///	out_TexCoord = in_TexCoord;
        ///
        ///	gl_Position = projection * view * world * vec4(in_Vertex, 1.0f);
        ///}.
        /// </summary>
        internal static string DefaultVertexShader {
            get {
                return ResourceManager.GetString("DefaultVertexShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 140
        ///
        ///void main()
        ///{
        ///	// write the result
        ///	gl_FragColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);
        ///}.
        /// </summary>
        internal static string ErrorFragmentShader {
            get {
                return ResourceManager.GetString("ErrorFragmentShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 140
        ///in vec3 in_Vertex;
        ///
        ///uniform mat4x4 projection, view, world;
        ///
        ///void main()
        ///{
        ///	// transform and project the vertex
        ///	gl_Position = projection * view * world * vec4(in_Vertex, 1.0f);
        ///}.
        /// </summary>
        internal static string ErrorVertexShader {
            get {
                return ResourceManager.GetString("ErrorVertexShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 140
        ///in vec2 out_TexCoord;
        ///in vec4 out_TextureAlpha;
        ///in float out_Alpha;
        ///
        ///uniform sampler2D particleTexture;
        ///uniform int textureCount;
        ///
        ///void main()
        ///{
        ///	// read particle texture color
        ///	vec4 totalTextureColor;
        ///	if(textureCount == 1)
        ///	{
        ///		totalTextureColor += texture2D(particleTexture, out_TexCoord * vec2(2.0f, 2.0f));
        ///	}
        ///	else if(textureCount == 2)
        ///	{
        ///		totalTextureColor += texture2D(particleTexture, out_TexCoord * vec2(1.0f, 2.0f)) * out_TextureAlpha.x;
        ///		totalTextureColor += textur [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ParticleFragmentShader {
            get {
                return ResourceManager.GetString("ParticleFragmentShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 140
        ///layout(points) in;
        ///layout(triangle_strip, max_vertices = 4) out;
        ///
        ///in vec3 in_Vertex0[];
        ///in vec4 in_TextureAlpha0[];
        ///in float in_Scale0[];
        ///in float in_Alpha0[];
        ///
        ///out vec2 out_TexCoord;
        ///out vec4 out_TextureAlpha;
        ///out float out_Alpha;
        ///
        ///uniform mat4x4 projection, view;
        ///uniform vec3 camPos;
        ///
        ///void main()
        ///{
        ///	float alpha = in_Alpha0[0];
        ///	if(alpha == 0.0f)
        ///		return;
        ///
        ///	float scale = in_Scale0[0];
        ///	float hScale = scale * 0.5f;
        ///	vec3 pos = in_Vertex0[0];
        ///	vec4 textureAlpha = in_Tex [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ParticleGeometryShader {
            get {
                return ResourceManager.GetString("ParticleGeometryShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 140
        ///in vec3 in_Vertex;
        ///in vec3 in_Velocity;
        ///in vec4 in_TextureAlpha;
        ///in float in_Scale;
        ///in float in_LifeTime;
        ///
        ///out vec3 out_Vertex;
        ///out vec3 out_Velocity;
        ///out vec4 out_TextureAlpha;
        ///out float out_Scale;
        ///out float out_LifeTime;
        ///
        ///uniform vec3 emitterPosition;
        ///uniform vec3 gravity;
        ///uniform vec3 wind;
        ///uniform float deltaTime;
        ///uniform float time;
        ///uniform sampler1D randomTexture;
        ///uniform float maxLifeTime;
        ///uniform float startScale;
        ///uniform float deltaScale;
        ///uniform vec3 minVelocity; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ParticleUpdateShader {
            get {
                return ResourceManager.GetString("ParticleUpdateShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 140
        ///in vec3 in_Vertex;
        ///in vec4 in_TextureAlpha;
        ///in float in_Scale;
        ///in float in_LifeTime;
        ///
        ///out vec3 in_Vertex0;
        ///out vec4 in_TextureAlpha0;
        ///out float in_Scale0;
        ///out float in_Alpha0;
        ///
        ///uniform float maxLifeTime;
        ///
        ///void main()
        ///{
        ///	in_Vertex0 = in_Vertex;
        ///	in_TextureAlpha0 = in_TextureAlpha;
        ///	in_Scale0 = in_Scale;
        ///	if(in_LifeTime &gt; 0.0f)
        ///		in_Alpha0 = 1.0f - (in_LifeTime / maxLifeTime);
        ///	else
        ///		in_Alpha0 = 0.0f;
        ///}.
        /// </summary>
        internal static string ParticleVertexShader {
            get {
                return ResourceManager.GetString("ParticleVertexShader", resourceCulture);
            }
        }
    }
}
